---
- name: sysctl enable ipv4 forwarding and route all traffic through iptables 
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: yes

- name: net-tools
  yum:
    name: net-tools
    state: present

- name: sysctl enable ipv4 forwarding and route all traffic through iptables 
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    state: present
    reload: yes

- name: remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent

- name: disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

# sestatus to check
- name: disable selinux
  selinux:
    state: disabled

- name: kubernetes binaries
  copy:
    src: /vagrant/private/repo/kubernetes/server/bin/{{ item }}
    dest: /usr/bin/{{ item }}
    mode: 0755
  with_items:
    - kubelet
    - kube-proxy
    - kubectl

- name: kubernetes kube user
  user:
    name: kube

- name: kubernetes directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ kube_config_dir }}/manifests"
    - "{{ kube_config_dir }}/pki"
    - "{{ kube_config_dir }}/net"
    - "{{ kube_srv_dir }}"
    - /var/lib/kubelet/pki
    - /etc/systemd/system/kubelet.service.d
    - /etc/systemd/system/kube-proxy.service.d
    - /etc/cni/net.d
    - /opt/cni/bin

- name: kubelet systemd service file
  template:
    src: systemd/kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: kubelet systemd conf directory
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory

- name: kubelet systemd environment file
  template:
    src: systemd/kubelet.conf.j2
    dest: /etc/systemd/system/kubelet.service.d/kubelet.conf

- name: kube-proxy systemd service file
  template:
    src: systemd/kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service

- name: kube-proxy systemd conf directory
  file:
    path: /etc/systemd/system/kube-proxy.service.d
    state: directory

- name: kube-proxy systemd environment file
  template:
    src: systemd/kube-proxy.conf.j2
    dest: /etc/systemd/system/kube-proxy.service.d/kube-proxy.conf

- name: kubeconfig files
  template:
    src: etc/{{ item }}.config.j2
    dest: /etc/kubernetes/{{ item }}.config
  with_items:
    - admin
    - controller-manager
    - kubelet
    - scheduler

- name: cni 0.5.2 binaries
  copy:
    src: private/repo/cni/{{ item }}
    dest: /opt/cni/bin/{{ item }}
    mode: 0755
  with_items:
    - bridge
    - cnitool
    - dhcp
    - flannel
    - host-local
    - ipvlan
    - loopback
    - macvlan
    - noop
    - ptp
    - tuning

- name: kubelet manifests
  template:
    src: etc/manifests/{{ item }}.yml
    dest: "{{ kube_config_dir }}/manifests/{{ item }}.yml"
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: certificates
  copy:
    src: private/cert/{{ item }}
    dest: "{{ kube_config_dir }}/pki/{{ item }}"
  with_items:
    - apiserver.key
    - apiserver.crt
    - ca.crt
    - ca.key
    - sa.key
    - sa.pub

# wait for core service ports to come up (apiserver, controller-manager, scheduler, etc.)

- name: flannel networking deployment file
  template:
    src: etc/net/flannel.yml.j2
    dest: "{{ kube_config_dir }}/net/flannel.yml"

- name: weave networking deployment file
  template:
    src: etc/net/weave.yml.j2
    dest: "{{ kube_config_dir }}/net/weave.yml.j2"

- name: core-dns deployment file
  template:
    src: etc/net/core-dns.yml.j2
    dest: "{{ kube_config_dir }}/net/core-dns.yml"

# use ansible kube module to put kube-flannel in place
# or use weave networking file

# kube-dns or OpenDNS for service discovery

# kubelet service

# kube-proxy service